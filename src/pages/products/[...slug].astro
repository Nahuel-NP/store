---
import ProductSlideshow from "@/components/products/ProductSlideshow.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import { actions } from "astro:actions";
const { slug } = Astro.params;
const { error, data } = await Astro.callAction(
  actions.getProductBySlugAction,
  slug ?? ""
);
if (error) {
  return Astro.redirect("/404?message=producto no encontrado");
}

const { product, images } = data;
---

<MainLayout title={product.title} description={product.description}>
  <div class="grid grid-cols-1 md:grid-cols-3 w-full">
    <ProductSlideshow images={images.map(i=>i.image)} />

    <section>
      <h2 class="text-2xl font-bold">{product.title}</h2>
      <h2 class="font-bold">${product.price}</h2>

      <h3 class="mt-5">Tallas</h3>
      <ul class="flex gap-3">
        {
          product.sizes.split(",").map((size) => (
            <li class="py-1 px-2" data-size={size}>
              {size}
            </li>
          ))
        }
      </ul>
      <span class="text-red-500 text-xs m-0 invisible" id="error-msg"
        >Seleccione una talla</span
      >
      <h3 class="mt-5">Cantidad</h3>
      <div>
        <button class="btn-quantity">-</button>
        <input type="number" min="1" value="1" />
        <button class="btn-quantity">+</button>
      </div>

      <button
        class="mt-5 bg-blue-500 text-white p-3 w-full disabled:bg-gray-200"
        >Añadir al carrito</button
      >

      <h3 class="mt-10">Descripción</h3>
      <p>{product.description}</p>
    </section>
  </div>

  <input type="hidden" id="product-id" value={product.id} />
</MainLayout>
<script>
  import { itemsInCart } from "@/store/cart.store";
  import { CartCookiesClient } from "@/utils";
import { navigate } from "astro:transitions/client";

  document.addEventListener("astro:page-load", () => {
    const sizeElements = document.querySelectorAll("li");
    const errorEl = document.querySelector("#error-msg");

    sizeElements.forEach((liEl) => {
      liEl.addEventListener("click", () => {
        sizeElements.forEach((sizeEl) =>
          sizeEl.classList.remove("selected-size")
        );
        liEl.classList.add("selected-size");
        errorEl?.classList.add("invisible");
      });
    });

    const quantityInput = document.querySelector("input") as HTMLInputElement;
    const productIdInput = document.querySelector(
      "#product-id"
    ) as HTMLInputElement;

    let quantity = 1;

    const [decrementBtn, incrementBtn, addToCartBtn] =
      document.querySelectorAll("button");

    if (!incrementBtn || !decrementBtn || !addToCartBtn) {
      return;
    }
    incrementBtn.addEventListener("click", () => {
      quantity = Math.min(quantity + 1, 5);
      quantityInput.value = quantity.toString();
    });

    decrementBtn.addEventListener("click", () => {
      quantity = Math.max(quantity - 1, 1);
      quantityInput.value = quantity.toString();
    });

    addToCartBtn.addEventListener("click", () => {
      const size = document.querySelector(".selected-size")?.textContent;
      if (!size) {
        errorEl?.classList.remove("invisible");
        return;
      }
      addToCartBtn.disabled = true;

      const cart = CartCookiesClient.addToCart({
        id: productIdInput.value,
        size,
        quantity,
      });
      itemsInCart.set(cart.length);

      navigate('/cart')
    });
  });
</script>

<style>
  h3 {
    @apply font-bold;
  }

  li {
    @apply hover:underline cursor-pointer;
  }

  .selected-size {
    @apply text-blue-500 border  underline font-bold transition-colors;
  }

  .btn-quantity {
    @apply w-10 text-center p-2 border border-gray-300 hover:bg-gray-100 cursor-pointer;
  }

  input {
    @apply w-16 text-center p-2 border border-gray-300;
  }

  input[type="number"]::-webkit-outer-spin-button,
  input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type="number"] {
    -moz-appearance: textfield; /* Para Firefox */
  }
</style>
